# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}]({{ self::remote_url() }}/releases/tag/{{ version }})
{% else %}\
    ## Unreleased
{% endif %}\

{% for group, commits in commits | group_by(attribute="group" ) %}
    ### {{ group | striptags | trim | upper_first }}{% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.github.pr_title %}
           {%- continue -%}
        {%- endif -%}
        - {{ commit.github.pr_title | upper_first }} by @{{ commit.github.username }} in [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pulls/{{ commit.github.pr_number }})
    {% endfor %}
    {% raw %}\n{% endraw %}\
{% endfor %}

"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '^Merge pull request.*\n\n', replace = ""}, 
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^(?i)prepare", skip = true },
    { message = "(?i)prepare for|release", skip = true },
    { message = "^(?i)release", skip = true },
    { message = "(?i)update changelog", skip = true },
    { message = "^(?i).breaking.", group = "<!-- 0 -->⛓️‍💥 Breaking Changes" },
    { message = "^(?i)feat!", group = "<!-- 0 -->⛓️‍💥 Breaking Changes" },
    { message = "^(?i)fix!", group = "<!-- 0 -->⛓️‍💥 Breaking Changes" },
    { message = "^(?i)refactor!", group = "<!-- 0 -->⛓️‍💥 Breaking Changes" },
    { message = "^(?i)revert!", group = "<!-- 0 -->⛓️‍💥 Breaking Changes" },
    { message = "^(?i)chore:", group = "<!-- 4 -->⚙️ Miscellaneous" },
    { message = "^(?i)ci:", group = "<!-- 4 -->⚙️ Miscellaneous" },
    { message = "^(?i)doc:", group = "<!-- 5 -->📚 Documentation" },
    { message = "^(?i)feat:", group = "<!-- 1 -->🚀 New Features" },
    { message = "^(?i)fix:", group = "<!-- 2 -->🐛 Bug Fixes" },
    { message = "^(?i)fix", group = "<!-- 2 -->🐛 Bug Fixes" },
    { message = "^(?i)perf:", group = "<!-- 2 -->⚡ Performance" },
    { message = "^(?i)refactor:", group = "<!-- 3 -->🚜 Refactor" },
    { message = "^(?i)revert:", group = "<!-- 3 -->🚜 Refactor" },
    { message = "^(?i)add|enable", group = "<!-- 1 -->🚀 New Features" },
    { message = "^(?i)update", group = "<!-- 4 -->⚙️ Miscellaneous" },
    { message = "^(?i)upgrade", group = "<!-- 4 -->⚙️ Miscellaneous" },
    { message = "^(?i)deprecate", group = "<!-- 3 -->🚜 Refactor" },
    { message = "^(?i)bump", group = "<!-- 4 -->⚙️ Miscellaneous" },
    { message = "^(?i)migrate", group = "<!-- 3 -->🚜 Refactor" },  
    { message = ".*", group = "<!-- 4 -->⚙️ Miscellaneous" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "[0-9]{4}.[0-9]{2}.[1-9]{1,}"
# regex for skipping tags
#skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
#ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
